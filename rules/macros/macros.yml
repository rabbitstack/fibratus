- macro: spawn_process
  expr: kevt.name = 'CreateProcess'

- macro: open_process
  expr: kevt.name = 'OpenProcess' and ps.access.status = 'Success'
  description: Acquires the local process object

- macro: open_process_all_access
  expr: open_process and ps.access.mask.names in ('ALL_ACCESS')
  description: Acquires the local process object with all possible access rights

- macro: spawn_msoffice_process
  expr: spawn_process and ps.child.name iin msoffice_binaries
  description: Identifies the execution of the MS Office process

- macro: write_file
  expr: kevt.name = 'WriteFile'

- macro: open_file
  expr: kevt.name = 'CreateFile' and file.operation = 'OPEN'

- macro: create_file
  expr: kevt.name = 'CreateFile' and file.operation != 'OPEN'

- macro: query_registry
  expr: kevt.name in ('RegQueryKey', 'RegQueryValue')

- macro: open_registry
  expr: kevt.name = 'RegOpenKey'

- macro: load_module
  expr: kevt.name = 'LoadImage'

- macro: unload_module
  expr: kevt.name = 'UnloadImage'

- macro: set_value
  expr: kevt.name = 'RegSetValue'

- macro: create_key
  expr: kevt.name = 'RegCreateKey'

- macro: modify_registry
  expr: (set_value or create_key)

- macro: send_socket
  expr: kevt.name = 'Send'

- macro: virtual_alloc
  expr: kevt.name = 'VirtualAlloc'

- macro: virtual_free
  expr: kevt.name = 'VirtualFree'

- macro: map_view_file
  expr: kevt.name = 'MapViewFile'

- macro: unmap_view_file
  expr: kevt.name = 'UnmapViewFile'

- macro: map_view_of_section
  expr: map_view_file and file.view.type in ('IMAGE', 'IMAGE_NO_EXECUTE`)

- macro: unmap_view_of_section
  expr: unmap_view_file and file.view.type in ('IMAGE', 'IMAGE_NO_EXECUTE`)

- macro: duplicate_handle
  expr: kevt.name = 'DuplicateHandle'

- macro: create_handle
  expr: kevt.name = 'CreateHandle'

- macro: load_driver
  expr: >
    (load_module and image.name iendswith '.sys')
      or
    (create_handle and handle.type = 'Driver')
  description: |
    Detects the loading of the kernel driver. Image load events are published when
    executable images, DLLs, or driver PE objects are loaded. On the contrary, we can
    also detect loading of kernel driver by observing the object manager events and
    watching for driver objects being created.

- macro: unload_driver
  expr: unload_image and image.name iendswith '.sys'

- macro: load_unsigned_module
  expr: >
    load_module and image.signature.type = 'NONE'
  description: |
    Detects when unsigned executable or DLL is loaded into process address space.
    The module is considered as unsigned if it lacks the cert in the PE security
    directory or the Authenticode hash is not present in any of the catalogs.

- macro: load_untrusted_module
  expr: >
    load_module
      and
    (image.signature.level = 'UNCHECKED' or image.signature.level = 'UNSIGNED')
  description: |
    Detects when untrusted executable or DLL is loaded into process address space.
    Windows must verify the trust chain by following the certificates to a trusted
    root certificate. If the trust chain is not satisfied, the module is considered
    untrusted.

- macro: load_unsigned_or_untrusted_module
  expr: (load_unsigned_module) or (load_untrusted_module)
  description: >
    Detects when either unsigned or untrusted module is loaded into process address space.

- macro: write_minidump_file
  expr: >
    write_file
      and
    (
      file.extension iin
      (
        '.dmp',
        '.mdmp',
        '.dump'
      )
        or
      is_minidump(file.name)
    )
  description: |
    Detects a process writing the minidump file. Minidump files are used for crash
    reporting as they contain a snapshot of the process' memory such as local variables
    or heap objects. Processes can create minidump files by calling into the MiniDumpWriteDump()
    function. This macro checks the well-known extensions of the minidump files as well as
    the minidump signature.

- macro: msoffice_binaries
  list: [EXCEL.EXE, WINWORD.EXE, MSACCESS.EXE, POWERPNT.EXE, WORDPAD.EXE]

- macro: web_browser_binaries
  list: [
    chrome.exe, firefox.exe, msedge.exe, iexplore.exe, opera.exe,
    brave.exe, microsoftedge.exe, chromium.exe, safari.exe
    ]

- macro: web_browser_cred_stores
  list: [
    "?:\\Users\\*\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies",
    "?:\\Users\\*\\AppData\\Local\\Chrome\\User Data\\Default\\Login Data",
    "?:\\Users\\*\\AppData\\Local\\Google\\Chrome\\User Data\\Local State",
    "?:\\Users\\*\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV0?.dat",
    "?:\\Users\\*\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite",
    "?:\\Users\\*\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\*\\sigons.sqlite",
    "?:\\Users\\*\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\*\\logins.json",
    "?:\\Users\\*\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\*\\key?.db",
    ]

- macro: executable_extensions
  list: [.exe, .com, .scr]

- macro: module_extensions
  list: [.dll, .ocx, .cpl]

- macro: vault_extensions
  list: [.vcrd, .vpol]
