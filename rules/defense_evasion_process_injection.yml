- group: Process Doppelganging
  description: |
    Adversaries may inject malicious code into process via process doppelganging
    in order to evade process-based defenses as well as possibly elevate privileges.
    Process doppelganging is a method of executing arbitrary code in the address space
    of a separate live process.

    Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform
    safe file operations. To ensure data integrity, TxF enables only one transacted
    handle to write to a file at a given time. Until the write handle transaction is
    terminated, all other handles are isolated from the writer and may only read the
    committed version of the file that existed at the time the handle was opened. To
    avoid corruption, TxF performs an automatic rollback if the system or application
    fails during a write transaction.

    Although deprecated, the TxF application programming interface (API) is still enabled
    as of Windows 11.

    Adversaries may abuse TxF to a perform a file-less variation of Process Injection.
    Similar to Process Hollowing, process doppelganging involves replacing the memory of
    a legitimate process, enabling the veiled execution of malicious code that may evade
    defenses and detection. Process doppelganging's use of TxF also avoids the use of
    highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and
    SetThreadContext.

    Process Doppelganging is implemented in 4 steps:

    1. Transact – Create a TxF transaction using a legitimate executable then overwrite
    the file with malicious code.
    2. Load – Create a shared section of memory and load the malicious executable.
    3. Rollback – Undo changes to original executable, effectively removing malicious code
    from the file system.
    4. Animate – Create a process from the tainted section of memory and initiate execution.
  labels:
    tactic.id: TA0005
    tactic.name: Defense Evasion
    tactic.ref: https://attack.mitre.org/tactics/TA0005/
    technique.id: T1055
    technique.name: Process Injection
    technique.ref: https://attack.mitre.org/techniques/T1055/
    subtechnique.id: T1055.013
    subtechnique.name: Process Doppelganging
    subtechnique.ref: https://attack.mitre.org/techniques/T1055/013/
  rules:
    - name: Potential Process Doppelganging
      description: |
        Detects when adversaries abuse the NTFS transactional API functions
        to overwrite the legitimate executable with shellcode and then create
        a section object from the malicious file. The tainted section is used
        to spawn a new process via the undocumented NtCreateProcessEx native
        API function.
      condition: >
        sequence
        maxspan 2m
        by ps.uuid
          |create_file and thread.callstack.symbols imatches
              (
                'kernel32.dll!CreateFileTransacted*',
                'ntdll.dll!RtlSetCurrentTransaction'
              )
          |
          |spawn_process|
      action:
      - name: kill
      min-engine-version: 2.2.0

- group: Process Hollowing
  description: |
    Adversaries may inject malicious code into suspended and hollowed processes in order to
    evade process-based defenses. Process hollowing is a method of executing arbitrary code
    in the address space of a separate live process.

    Process hollowing is commonly performed by creating a process in a suspended state then
    unmapping/hollowing its memory, which can then be replaced with malicious code. A victim
    process can be created with native Windows API calls such as CreateProcess, which includes
    a flag to suspend the processes primary thread. At this point the process can be unmapped
    using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection before being written
    to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory,
    SetThreadContext, then ResumeThread/ResumeProcess respectively.
  labels:
    tactic.id: TA0005
    tactic.name: Defense Evasion
    tactic.ref: https://attack.mitre.org/tactics/TA0005/
    technique.id: T1055
    technique.name: Process Injection
    technique.ref: https://attack.mitre.org/techniques/T1055/
    subtechnique.id: T1055.012
    subtechnique.name: Process Hollowing
    subtechnique.ref: https://attack.mitre.org/techniques/T1055/012/
  rules:
    - name: Potential Process Hollowing
      description: |
        Identifies process hollowing injection attempts by spawning a legitimate process
        in a suspended state. The code section of the process' executable in-memory image
        is unmapped and replaced enabling the veiled execution of malicious code.
      condition: >
        sequence
        maxspan 2m
          |spawn_process| by ps.child.uuid
          |unmap_view_of_section and file.view.size > 4096 and (length(file.name) = 0 or not ext(file.name) = '.dll')| by ps.uuid
          |load_executable and pe.is_modified| by ps.uuid
      action:
      - name: kill
      min-engine-version: 2.0.0

- group: Thread Execution Hijacking
  description: |
    Adversaries may inject malicious code into hijacked processes in order to evade process-based
    defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of
    executing arbitrary code in the address space of a separate live process.

    This is very similar to Process Hollowing but targets an existing process rather than creating
    a process in a suspended state.

    Running code in the context of another process may allow access to the process's memory,
    system/network resources, and possibly elevated privileges. Execution via Thread Execution
    Hijacking may also evade detection from security products since the execution is masked under
    a legitimate process.
  labels:
    tactic.id: TA0005
    tactic.name: Defense Evasion
    tactic.ref: https://attack.mitre.org/tactics/TA0005/
    technique.id: T1055
    technique.name: Process Injection
    technique.ref: https://attack.mitre.org/techniques/T1055/
    subtechnique.id: T1055.003
    subtechnique.name: Thread Execution Hijacking
    subtechnique.ref: https://attack.mitre.org/techniques/T1055/003/
  rules:
    - name: Potential thread execution hijacking
      description: |
        Identifies access to a remote thread followed by changing
        the thread registers to possibly divert the execution flow
        to the malicious code.
      condition: >
        sequence
        maxspan 2m
        by ps.uuid
          |open_thread and kevt.pid != 4 and kevt.pid != kevt.arg[pid]
              and
           thread.access.mask.names in ('ALL_ACCESS', 'SUSPEND_THREAD')
              and
              not
           ps.exe imatches
              (
                '?:\\Program Files\\*',
                '?:\\Program Files (x86)\\*'
              )
          |
          |set_thread_context|
      action:
      - name: kill
      min-engine-version: 2.0.0

- group: Process Injection
  description: |
    Adversaries may inject code into processes in order to evade process-based defenses as well
    as possibly elevate privileges. Process injection is a method of executing arbitrary code in
    the address space of a separate live process. Running code in the context of another process
    may allow access to the process's memory, system/network resources, and possibly elevated privileges.

    Execution via process injection may also evade detection from security products since the execution is
    masked under a legitimate process.

    There are many different ways to inject code into a process, many of which abuse legitimate functionalities.
    These implementations exist for every major OS but are typically platform specific.
    More sophisticated samples may perform multiple process injections to segment modules and further evade
    detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication
    channel.
  labels:
    tactic.id: TA0005
    tactic.name: Defense Evasion
    tactic.ref: https://attack.mitre.org/tactics/TA0005/
    technique.id: T1055
    technique.name: Process Injection
    technique.ref: https://attack.mitre.org/techniques/T1055/
  rules:
    - name: Process spawned via remote thread
      description: |
        Identifies the creation of a process with the parent call stack not
        revealing normal API functions for process creation. This is a potential
        sign of process injection.
      condition: >
        spawn_process
            and
        thread.callstack.symbols imatches
            (
              'ntdll.dll!ZwCreateThreadEx*',
              'ntdll.dll!NtCreateThreadEx*',
              'ntdll.dll!RtlCreateUserThread'
            )
            and
            not
        thread.callstack.symbols imatches ('*CreateProcess*', '*CreateUserProcess*')
      action:
      - name: kill
      min-engine-version: 2.2.0
    - name: Potential process injection via tainted memory section
      description: |
        Identifies potential process injection when the adversary creates and maps a memory
        section with RW protection rights followed by mapping of the same memory section in
        the remote process with RX protection.
        By definition, the mapped view in the target process mirrors the content of the local
        process address space. The attacker can poison the local section memory with shellcode
        and execute it in the context of the remote process.
      condition: >
        sequence
        maxspan 1m
          |map_view_of_section and file.view.protection = 'READWRITE' and kevt.pid != 4 and file.view.size >= 4096| as e1
          |map_view_of_section and file.view.protection = 'READONLY|EXECUTE' and file.key = $e1.file.key
              and
           kevt.pid != $e1.kevt.pid
              and
              not
           ps.exe imatches
              (
                '?:\\Program Files\\Mozilla Firefox\\firefox.exe',
                '?:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'
              )
          |
      action:
      - name: kill
      min-engine-version: 2.2.0
    - name: Thread context set from unbacked memory
      description: |
        Identifies manipulation of the thread context from unbacked memory region. This may be
        indicative of process injection.
      condition: >
        set_thread_context and thread.callstack.summary imatches ('ntdll.dll|kernelbase.dll|unbacked')
      min-engine-version: 2.2.0

- group: Dynamic-link Library Injection
  description: |
    Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses
    as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address
    space of a separate live process.

    DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target
    process before loading the DLL by invoking a new thread. The write can be performed with native Windows API
    calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread, which calls the
    LoadLibrary API responsible for loading the DLL.
  labels:
    tactic.id: TA0005
    tactic.name: Defense Evasion
    tactic.ref: https://attack.mitre.org/tactics/TA0005/
    technique.id: T1055
    technique.name: Process Injection
    technique.ref: https://attack.mitre.org/techniques/T1055/
    subtechnique.id: T1055.001
    subtechnique.name: Dynamic-link Library Injection
    subtechnique.ref: https://attack.mitre.org/techniques/T1055/001/
  rules:
    - name: Suspicious DLL loaded via memory section mapping
      description: |
        Identifies the mapping of a memory section with RX protection followed by unsigned DLL loading.
      condition: >
        sequence
        maxspan 2m
        by ps.uuid
          |map_view_of_section and file.view.protection = 'READONLY|EXECUTE' and kevt.pid != 4 and file.view.size >= 4096|
          |(load_unsigned_or_untrusted_dll)|
      action:
      - name: kill
      min-engine-version: 2.2.0
