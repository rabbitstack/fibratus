- group: Access to Security Account Manager database
  description: |
    Adversaries may attempt to extract credential material from
    the Security Account Manager (SAM) database. The SAM is a database
    file that contains local accounts for the host.
  labels:
    tactic.id: TA0006
    tactic.name: Credential Access
    tactic.ref: https://attack.mitre.org/tactics/TA0006/
    technique.id: T1003
    technique.name: OS Credential Dumping
    technique.ref: https://attack.mitre.org/techniques/T1003/
    subtechnique.id: T1003.002
    subtechnique.name: Security Account Manager
    subtechnique.ref: https://attack.mitre.org/techniques/T1003/002/
  rules:
    - name: File access to SAM database
      description: |
        Identifies access to the Security Account Manager on-disk database.
      condition: >
        open_file
            and
        file.name imatches
            (
              '?:\\WINDOWS\\SYSTEM32\\CONFIG\\SAM',
              '\\Device\\HarddiskVolumeShadowCopy*\\WINDOWS\\SYSTEM32\\CONFIG\\SAM',
              '\\??\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy*\\WINDOWS\\SYSTEM32\\CONFIG\\SAM'
            )
            and
            not
        ps.exe imatches
            (
              '?:\\Program Files\\*',
              '?:\\Program Files (x86)\\*',
              '?:\\Windows\\System32\\lsass.exe'
            )
      min-engine-version: 2.0.0
    - name: Potential SAM database dump through registry
      description:
        Identifies access to the Security Account Manager registry hives.
      condition: >
        sequence
        maxspan 10m
          |spawn_process
              and
              not
           ps.exe imatches
             (
               '?:\\Program Files\\*.exe',
               '?:\\Program Files (x86)\\*.exe'
             )
          | by ps.child.uuid
          |(query_registry or open_registry)
              and
            registry.key.name imatches
              (
                'HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\*',
                'HKEY_LOCAL_MACHINE\\SAM\\*',
                'HKEY_LOCAL_MACHINE\\SAM'
              )
              and
              not
            ps.exe imatches
              (
                '?:\\Windows\\System32\\lsass.exe',
                '?:\\Windows\\explorer.exe',
                '?:\\Windows\\System32\\Taskmgr.exe',
                '?:\\Windows\\System32\\sihost.exe',
                '?:\\Windows\\System32\\SearchIndexer.exe',
                '?:\\Windows\\System32\\svchost.exe',
                '?:\\Windows\\System32\\services.exe',
                '?:\\ProgramData\\Microsoft\\Windows Defender\\*\\MsMpEng.exe'
              )
            | by ps.uuid
      min-engine-version: 2.0.0

- group: LSASS memory
  description: |
    Adversaries may attempt to access credential material stored in the
    process memory of the Local Security Authority Subsystem Service (LSASS).
    After a user logs on, the system generates and stores a variety of credential
    materials in LSASS process memory. These credential materials can be harvested
    by an administrative user or SYSTEM and used to conduct Lateral Movement.
  labels:
    tactic.id: TA0006
    tactic.name: Credential Access
    tactic.ref: https://attack.mitre.org/tactics/TA0006/
    technique.id: T1003
    technique.name: OS Credential Dumping
    technique.ref: https://attack.mitre.org/techniques/T1003/
    subtechnique.id: T1003.001
    subtechnique.name: LSASS Memory
    subtechnique.ref: https://attack.mitre.org/techniques/T1003/001/
  rules:
    - name: LSASS memory dumping via legitimate or offensive tools
      description: |
        Detects an attempt to dump the LSAAS memory to the disk by employing legitimate
        tools such as procdump, Task Manager, Process Explorer or built-in Windows tools such
        as comsvcs.dll.
      condition: >
        sequence
        maxspan 2m
        by ps.uuid
          |open_process
              and
           ps.access.mask.names in ('ALL_ACCESS', 'CREATE_PROCESS', 'VM_READ')
              and
           kevt.arg[exe] imatches '?:\\Windows\\System32\\lsass.exe'
              and
              not
           ps.exe imatches
              (
                '?:\\Windows\\System32\\svchost.exe',
                '?:\\ProgramData\\Microsoft\\Windows Defender\\*\\MsMpEng.exe'
              )
          |
          |write_minidump_file|
      output: >
         Detected an attempt by `%1.ps.name` process to access and read
         the memory of the **Local Security And Authority Subsystem Service**
         and subsequently write the `%2.file.name` dump file to the disk device
      min-engine-version: 2.0.0
      severity: critical
    - name: LSASS memory dump preparation via SilentProcessExit
      description: |
        Adversaries may exploit the SilentProcessExit debugging technique to conduct
        LSASS memory dump via WerFault.exe (Windows Error Reporting) binary by creating
        specific registry keys/values.
        WerFault.exe is a process known for dumping every crashing process.
        Attackers may exploit the WER service to evade defense mechanisms.
        This method relies on a mechanism introduced in Windows 7 called Silent Process Exit,
        which provides the ability to trigger specific actions for a monitored process
        either when process terminates itself by calling ExitProcess(), or another process
        terminates it via the TerminateProcess() API.
      condition: >
        modify_registry
            and
        registry.key.name
            imatches
        'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass*'
      min-engine-version: 2.0.0
    - name: LSASS memory dump via Windows Error Reporting
      description: |
        Adversaries may abuse Windows Error Reporting service to dump LSASS memory. The ALPC protocol can send
        a message to report an exception on LSASS and consequently cause WER to dump the memory of the LSASS process.
      condition: >
        sequence
        maxspan 2m
          |spawn_process
              and
           ps.child.name in ('WerFault.exe', 'WerFaultSecure.exe')
          | by ps.child.uuid
          |write_minidump_file
              and
           file.name icontains 'lsass'
          | by ps.uuid
      min-engine-version: 2.0.0

- group: Access to NTDS Active Directory domain database
  description: |
    Adversaries may attempt to access or create a copy of the Active Directory domain database
    in order to steal credential information, as well as obtain other information about domain
    members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is
    located in %SystemRoot%\NTDS\Ntds.dit of a domain controller.
  labels:
    tactic.id: TA0006
    tactic.name: Credential Access
    tactic.ref: https://attack.mitre.org/tactics/TA0006/
    technique.id: T1003
    technique.name: OS Credential Dumping
    technique.ref: https://attack.mitre.org/techniques/T1003/
    subtechnique.id: T1003.003
    subtechnique.name: NTDS
    subtechnique.ref: https://attack.mitre.org/techniques/T1003/003/
  rules:
    - name: Suspicious access to Active Directory domain database
      description: |
        Detects suspicious access to the Active Directory domain database. Adversaries may attempt to access or create a
        copy of the Active Directory domain database in order to steal credential information.
      condition: >
        open_file
            and
        file.name imatches
            (
              '\\Device\\HarddiskVolumeShadowCopy*\\WINDOWS\\NTDS\\ntds.dit',
              '?:\\WINDOWS\\NTDS\\ntds.dit'
            )
            and
            not
        ps.exe imatches
            (
               '?:\\Windows\\System32\\lsass.exe',
               '?:\\ProgramData\\Microsoft\\Windows Defender\\*\\MsMpEng.exe'
            )
      min-engine-version: 2.0.0
